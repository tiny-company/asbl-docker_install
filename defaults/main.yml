---

###################################################
## docker_install role vars
###################################################

## root username (default is root)
root_user: root

## user to run this playbook
docker_install_user: ansible

## ==================
## remove obsolete docker package
docker_packages_obsolete_list:
  - docker
  - docker-engine
  - docker.io
  - containerd
  - runc
  - docker-doc

## ==================
## set docker root data dir
docker_data_root: "/var/lib/docker"

## ==================
## docker rootful or rootless
## default install to rootless docker
## set to true to install rootfull docker (less secure)
docker_rootfull: true

## ==================
## docker packages installation

## stable or test channel
docker_channel: ["stable"]
## see versions at : https://docs.docker.com/desktop/release-notes/
docker_version: ""

docker_apt_repo_key:
  - {"url" : "https://download.docker.com/linux/{{ ansible_distribution | lower }}/gpg", "dest" : "/etc/apt/trusted.gpg.d/docker.asc"}
docker_apt_repo:
  - {"url" : "deb [signed_by=/etc/apt/trusted.gpg.d/docker.asc] https://download.docker.com/linux/{{ ansible_distribution | lower }} {{ ansible_distribution_release | lower }} stable", "filename" : "docker-ce"}

docker_package_dependencies:
  - acl
  - apt-transport-https
  - ca-certificates
  - cron
  - software-properties-common
  - curl
  - dbus-user-session
  - gnupg2

docker_packages_list:
  - docker-ce
  - docker-ce-cli
  - containerd.io
  - docker-ce-rootless-extras
  - docker-compose-plugin

## ==================
## docker-compose package installation
docker_compose_version: ""
docker_compose_v2_version: ""

## ==================
## docker pip configuration
docker_pip_virtualenv: "/usr/local/lib/docker/virtualenv"
docker_default_pip_packages:
  - name: "docker"
    state: "{{ docker_pip_docker_state }}"
  - name: "docker-compose"
    version: "{{ docker_compose_version }}"
    path: "/usr/local/bin/docker-compose"
    src: "{{ docker_pip_virtualenv + '/bin/docker-compose' }}"
    state: "{{ docker_pip_docker_compose_state }}"

docker_pip_packages:
  - "gcc"
  - "python3-setuptools"
  - "python3-dev"
  - "python3-pip"
  - "virtualenv"

# docker_pip_docker_state: "present"
# docker_pip_docker_compose_state: "absent"

## ==================
## docker user creation
docker_user: docker
docker_group_name: docker
## user to add to docker group
docker_group_add_users:
  - ansible

## ==================
## docker configuration
docker_opts_path:
  - "/etc/docker"
  - "/etc/systemd/system/docker.service.d"
docker_daemon_flags:
  - "-H unix://"
docker_daemon_environment: []
docker_systemd_override: ""
docker_default_daemon_json: |
  "log-driver": "journald",
  "features": {
    "buildkit": true
  }
docker_daemon_json: ""

## ==================
## dockerhub / registry vars
docker_set_dockerhub: false
docker_registries: []
  # - registry_url: "https://index.docker.io/v1/"
  #   username: ""
  #   password: ""
  #   reauthorize: true
  #   state: "present"

## ==================
## docker cron configuration

# docker_cron_jobs:
#   - name: "Docker disk clean up"
#     job: "docker system prune -af > /dev/null 2>&1"  # yamllint disable-line rule:line-length
#     schedule: ["0", "0", "*", "*", "0"]
#     cron_file: "docker-disk-clean-up"
#     user: "{{ (docker_users | first) | d('root') }}"

